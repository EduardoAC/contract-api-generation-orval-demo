/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * API example
 * The example API description
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { DogBreedsResponse, DogImage } from '.././model';

/**
 * @summary Get a random dog image
 */
export const dogsControllerGetImage = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DogImage>> => {
  return axios.get(`/dogs/image`, options);
};

export const getDogsControllerGetImageQueryKey = () => {
  return [`/dogs/image`] as const;
};

export const getDogsControllerGetImageQueryOptions = <
  TData = Awaited<ReturnType<typeof dogsControllerGetImage>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof dogsControllerGetImage>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDogsControllerGetImageQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dogsControllerGetImage>>
  > = ({ signal }) => dogsControllerGetImage({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof dogsControllerGetImage>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DogsControllerGetImageQueryResult = NonNullable<
  Awaited<ReturnType<typeof dogsControllerGetImage>>
>;
export type DogsControllerGetImageQueryError = AxiosError<unknown>;

/**
 * @summary Get a random dog image
 */

export function useDogsControllerGetImage<
  TData = Awaited<ReturnType<typeof dogsControllerGetImage>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof dogsControllerGetImage>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getDogsControllerGetImageQueryOptions(options);

  const query = useQuery(queryOptions);

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const dogsControllerGetBreeds = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DogBreedsResponse>> => {
  return axios.get(`/dogs/breeds`, options);
};

export const getDogsControllerGetBreedsQueryKey = () => {
  return [`/dogs/breeds`] as const;
};

export const getDogsControllerGetBreedsQueryOptions = <
  TData = Awaited<ReturnType<typeof dogsControllerGetBreeds>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof dogsControllerGetBreeds>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDogsControllerGetBreedsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dogsControllerGetBreeds>>
  > = ({ signal }) => dogsControllerGetBreeds({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof dogsControllerGetBreeds>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DogsControllerGetBreedsQueryResult = NonNullable<
  Awaited<ReturnType<typeof dogsControllerGetBreeds>>
>;
export type DogsControllerGetBreedsQueryError = AxiosError<unknown>;

export function useDogsControllerGetBreeds<
  TData = Awaited<ReturnType<typeof dogsControllerGetBreeds>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof dogsControllerGetBreeds>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getDogsControllerGetBreedsQueryOptions(options);

  const query = useQuery(queryOptions);

  query.queryKey = queryOptions.queryKey;

  return query;
}
